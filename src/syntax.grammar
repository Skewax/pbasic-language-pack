@top Program { stmt* }

@precedence {

}

@skip { space | comment | newline }

stmt { 
  Debug | 
  For | 
  LoopUntil | 
  If |
  VarDecl | 
  ConDecl |
  DataDecl |

  Return | 
  Go | 
  Gosub | 
  End |

  Pause |

  Assignment |
  Label |
  expr 
}

ConDecl { Identifier ConKW term }
VarDecl { Identifier VarKW type }
DataDecl { Identifier DataKW data_lit }

Debug { DebugKW "?"? comma_sep<debuggable_expr> }
For { ForKW Identifier "=" term ToKW term (StepKW term)? stmt+ NextKW }
LoopUntil { DoKW stmt+ LoopKW UntilKW Logical }
Pause { PauseKW lit }

if_tail { Elseif | Else | EndifKW }
If { IfKW Logical ThenKW stmt* if_tail }
Elseif { ElseifKW Logical ThenKW stmt* if_tail }
Else { ElseKW stmt* EndifKW }


Return { ReturnKW }
Go { GoKW Identifier }
Gosub { GosubKW Identifier }
End { EndKW }

Label { Identifier ":" }

Assignment { Identifier "=" expr }

debuggable_expr { expr | String | CrKW }
expr { Arith | term }

Logical { logical_term ((AndKW | OrKW) logical_term)* }
logical_term {Not | Condition | Paren_Logical}
Paren_Logical { "(" Logical ")" }
Not { NotKW Condition }
Condition { term ("=" | ">" | "<" | ">=" | "<=" | "<>") term }

Arith { term (math_op term)+ }
math_op { Plus | Minus | Mult | Divide }

term { lit | paren }
lit { Identifier | Number }

paren { "(" expr ")" }
type { BitKW | NibKW | ByteKW | WordKW }

data_lit { comma_sep<(type lit)> }

comma_sep<item> { item ("," item)* }


@tokens {
  Identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  Number { $[0-9]+ }
  String { '"' (!["\\] | "\\" _)* '"' }

  comment { "'" ![\n]* }
  space { $[ \t]+ }
  newline { $[\n\r]+ }

  Plus { '+' }
  Minus { '-' }
  Mult { '*' }
  Divide { '/' }

  ","
  "("
  ")"
  "="
  ">"
  "<"
  ">="
  "<="
  "<>"
  "?"
  ":"
}

@external specialize {Identifier} keyword from "./specialization.ts" {
  DebugKW,

  BitKW,
  NibKW,
  ByteKW,
  WordKW,

  DataKW,

  VarKW,
  ConKW,

  CrKW,

  DoneKW,
  ReturnKW,
  EndKW,

  DoKW,
  LoopKW,
  UntilKW,

  ForKW,
  ToKW,
  StepKW,
  NextKW,

  IfKW,
  ThenKW,
  ElseKW,
  ElseifKW,
  EndifKW,

  AndKW,
  OrKW,
  NotKW,

  GoKW,
  GosubKW,

  PauseKW
}

//@detectDelims