@top Program { stmt* }

// NOTE TO SELF: HANDLE FILE 
// C:\Users\rafaed\Downloads\Archive.zip\Robotics 0\simplified navigation

@precedence {

}

@skip { space | comment | newline }

stmt { 
  Debug | 
  For | 
  any_loop | 
  If |
  VarDecl | 
  ConDecl |
  DataDecl |

  Return | 
  Go | 
  Gosub | 
  End |

  Pause |
  RCTime |

  High |
  Low |

  Freqout |
  Pulsout |

  Read |

  Assignment |
  Label |
  expr 
}

ConDecl { Identifier ConKW term }
VarDecl { Identifier VarKW type }
DataDecl { Identifier DataKW data_lit }

Debug { DebugKW "?"? comma_sep<debuggable_expr> }
For { ForKW Identifier "=" term ToKW term (StepKW term)? stmt+ NextKW }

Until { UntilKW Logical }

Loop { DoKW stmt+ LoopKW }
UntilLoop { DoKW Until stmt+ LoopKW }
LoopUntil { Loop UntilKW Logical }

any_loop { LoopUntil | UntilLoop | Loop }

// pause time
Pause { PauseKW expr }

// rctime pin, state, var
RCTime { RCTimeKW lit "," lit "," Identifier }

// high pin
High { HighKW lit }
// low pin
Low { LowKW lit }

// read data_ref, [type] variable
Read { ReadKW expr "," type? Identifier }

Freqout { FreqoutKW expr "," expr "," expr }
Pulsout { PulsoutKW expr "," expr }

if_tail { Elseif | Else | EndifKW }
If { IfKW Logical ThenKW stmt* if_tail }
Elseif { ElseifKW Logical ThenKW stmt* if_tail }
Else { ElseKW stmt* EndifKW }


Return { ReturnKW }
Go { GoKW Identifier }
Gosub { GosubKW Identifier }
End { EndKW }

Label { Identifier ":" }

Assignment { Identifier "=" expr }

debuggable_expr { expr | String | CrKW }
expr { Arith | term }

Logical { logical_term ((AndKW | OrKW) logical_term)* }
logical_term {Not | Condition | Paren_Logical}
Paren_Logical { "(" Logical ")" }
Not { NotKW Condition }
Condition { term ("=" | ">" | "<" | ">=" | "<=" | "<>") term }

Arith { term (math_op term)+ }
math_op { Plus | Minus | Mult | Divide }

term { lit | paren }
lit { Identifier | Number }

paren { "(" expr ")" }
type { BitKW | NibKW | ByteKW | WordKW }

data_lit { comma_sep<(type? lit)> }

comma_sep<item> { item ("," item)* }

Number { decimal_int | binary_int }


@tokens {
  Identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  decimal_int { $[0-9]+ }
  binary_int { "%" $[01]+ }

  String { '"' (!["\\] | "\\" _)* '"' }

  comment { "'" ![\n]* }
  space { $[ \t]+ }
  newline { $[\n\r]+ }

  Plus { '+' }
  Minus { '-' }
  Mult { '*' }
  Divide { '/' }

  ","
  "("
  ")"
  "="
  ">"
  "<"
  ">="
  "<="
  "<>"
  "?"
  ":"
}

@external specialize {Identifier} keyword from "./specialization.ts" {
  DebugKW,

  BitKW,
  NibKW,
  ByteKW,
  WordKW,

  DataKW,

  VarKW,
  ConKW,

  CrKW,

  DoneKW,
  ReturnKW,
  EndKW,

  DoKW,
  LoopKW,
  UntilKW,

  ForKW,
  ToKW,
  StepKW,
  NextKW,

  IfKW,
  ThenKW,
  ElseKW,
  ElseifKW,
  EndifKW,

  AndKW,
  OrKW,
  NotKW,

  GoKW,
  GosubKW,

  PauseKW,
  RCTimeKW,

  HighKW,
  LowKW,

  FreqoutKW,
  PulsoutKW,

  ReadKW
}

//@detectDelims