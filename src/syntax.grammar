@top Program { stmt* stmt_nosep? }

// NOTE TO SELF: HANDLE FILE 
// C:\Users\rafaed\Downloads\Archive.zip\Robotics 0\simplified navigation

@skip { space | comment }

stmt { stmt_nosep? stmt_sep }
stmt_sep { newline | ":" }
stmt_nosep { 
  Debug | 
  For | 
  any_loop | 
  If |
  Select |

  VarDecl | 
  PinDecl | 
  ConDecl |
  DataDecl |

  Branch |
  OnGosub |
  OnGoto |

  Return | 
  Goto | 
  Gosub | 

  End |
  Exit |
  Stop |

  Pause |
  Nap |
  Sleep |

  Button |
  RCTime |

  Compare |

  High |
  Low |
  Toggle |

  Input |
  Output |
  Reverse |

  Configpin |
  Count |

  Auxio |
  Mainio |

  Freqout |
  Pulsout |
  Pulsin |

  Read |
  Write |
  Lookup |
  Lookdown |

  Get | 
  Put |

  Store |
  Run |

  XOut |
  DTMFOut |

  Assignment |

  Label
}

// declarations
ConDecl { Identifier ConKW term }
PinDecl { Identifier PinKW term }
VarDecl { Identifier VarKW type }

DataDecl { Identifier? DataKW data_lit }
data_lit { comma_sep<(type? lit)> | String }

// control flow

// for loops
For { 
  ForKW Identifier "=" expr ToKW expr (StepKW expr)?
    stmt+ 
  NextKW 
}

// loops with "do"
any_loop { LoopUntil | UntilLoop | LoopWhile | WhileLoop | Loop }

Loop { DoKW stmt+ LoopKW }
UntilLoop { DoKW Until stmt+ LoopKW }
WhileLoop { DoKW While stmt+ LoopKW }
LoopUntil { Loop Until }
LoopWhile { Loop While }

Until { UntilKW Logical }
While { WhileKW Logical }

// if statements
if_tail { Elseif | Else | EndifKW }

If { IfKW Logical ThenKW stmt* if_tail }
Elseif { ElseifKW Logical ThenKW stmt* if_tail }
Else { ElseKW stmt* EndifKW }

// select statements
Select { SelectKW expr Case+ CaseElse? EndselectKW }
Case { CaseLabel stmt* }
CaseElse { CaseElseLabel stmt* }

CaseLabel { CaseKW comma_sep<pattern> }
CaseElseLabel { CaseKW ElseKW }

// branchers
Branch { BranchKW expr "," "[" comma_sep<Identifier> "]" }
OnGosub { OnKW expr GosubKW comma_sep<Identifier> }
OnGoto { OnKW expr GotoKW comma_sep<Identifier> }

// labels
Label { Identifier ":" }

// general commands

// debug (debug_expr, )+
Debug { DebugKW comma_sep<debuggable_expr> }

// pause time
Pause { PauseKW expr }
// nap time
Nap { NapKW expr }
// sleep time
Sleep { SleepKW expr }

Compare { CompareKW expr "," Identifier }

// input
Input { InputKW expr }
// output
Output { OutputKW expr }
// reverse
Reverse { ReverseKW expr }

Configpin { ConfigPinKW expr "," expr }
Count { CountKW expr "," expr "," Identifier }

// button pin, downstate, delay, rate, workspace,
//      targetstate, address
Button {
  ButtonKW 
    expr ","        //pin
    expr ","        //downstate
    expr ","        //delay
    expr ","        //rate
    Identifier ","  //workspace
    expr ","        //targetstate
    Identifier      //address
}
// rctime pin, state, var
RCTime { RCTimeKW lit "," lit "," Identifier }

// high pin
High { HighKW expr }
// low pin
Low { LowKW expr }
// low pin
Toggle { ToggleKW expr }

// read data_ref, [type] variable
Read { ReadKW expr "," comma_sep<WordKW? Identifier> }
Write { WriteKW expr "," comma_sep<WordKW? expr> }

Lookup { 
  LoopkupKW expr "," LookupTarget "," Identifier
}
Lookdown { 
  LookdownKW expr comp_op? "," LookupTarget "," Identifier
}

LookupTarget {
  "[" String "]" |
  "[" comma_sep<lit> "]"
}

Get { GetKW expr "," comma_sep<WordKW? Identifier> }
Put { PutKW expr "," comma_sep<WordKW? Identifier> }

Run { RunKW expr }
Store { StoreKW expr }

Freqout { FreqoutKW expr "," expr "," expr }
Pulsout { PulsoutKW expr "," expr }
Pulsin { PulsinKW expr "," expr "," Identifier }

Auxio { AuxioKW }
Mainio { MainioKW }

Return { ReturnKW }
Goto { GotoKW Identifier }
Gosub { GosubKW Identifier }

End { EndKW }
Exit { ExitKW }
Stop { StopKW }

Assignment { Identifier "=" expr }

XOut {
  XOutKW expr "," expr "," "[" comma_sep<XOutParam> "]"
}

XOutParam {
  expr "\\" expr ("\\" expr)?
}

DTMFOut { 
  DTMFOutKW expr ","        // pin
    (expr "," expr)?        // on-off time
    "[" comma_sep<expr> "]" // tones
}

// debug expressions are wacky
debuggable_expr { 
  CrKW | 
  RawDebuggable | 
  DecDebuggable | 
  HexDebuggable | 
  BinDebuggable | 
  debuggable_term 
}

debuggable_term { expr | String }
RawDebuggable { "?" debuggable_expr }
DecDebuggable { DecKW debuggable_expr }
HexDebuggable { HexKW debuggable_expr }
BinDebuggable { BinKW debuggable_expr }

// patterns
pattern { ValuePattern | ComparisonPattern | RangePattern }

ValuePattern { term }
ComparisonPattern { comp_op term }
RangePattern { term ToKW term }

// logical expressions are distinct
Logical { logical_term ((AndKW | XorKW | OrKW) logical_term)* }
logical_term {Not | Condition | Paren_Logical}
Paren_Logical { "(" Logical ")" }
Not { NotKW Condition }
Condition { term comp_op term }

comp_op { "=" | ">" | "<" | ">=" | "<=" | "<>" }

// simple expressions
expr { Arith | term }

Arith { term (math_op term)+ }
math_op { Plus | Minus | Mult | Divide | Mult100 | Divide100 }

// terms and literals
term { lit | paren }
lit { LowByte | HighByte | Identifier | Number | Char }

LowByte { Identifier "." LowByteKW }
HighByte { Identifier "." HighByteKW }

paren { "(" expr ")" }

// types 
type { BitKW | NibKW | ByteKW | WordKW }

// general utilities
comma_sep<item> { item ("," newline* item)* }
Number { decimal_int | binary_int | hex_int }


@tokens {
  // Names
  Identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  // Numbers
  decimal_int { $[0-9]+ }
  binary_int { "%" $[01]+ }
  hex_int { "$" $[0-9A-Fa-f]+ }

  // Text-based literals
  Char { '"' (!["\\] | "\\" _) '"' }
  String { '"' (!["\\] | "\\" _) (!["\\] | "\\" _)+ '"' }

  // Whitespace
  comment { "'" ![\n]* }
  space { $[ \t]+ }
  newline { $[\n\r]+ }

  // Operators
  // arithmetics
  Plus { '+' }
  Minus { '-' }
  Mult { '*' }
  Divide { '/' }
  Mult100 { '**' }
  Divide100 { '/*' }

  // comparison
  "="
  ">"
  "<"
  ">="
  "<="
  "<>"

  // misc characters
  ","
  "("
  ")"
  "["
  "]"
  "?"
  ":"
  "."
  "\\"
}

// Keywords
@external specialize {Identifier} keyword from "./specialization.ts" {

  // [[START KEYWORDS]] //
  DebugKW,

  BitKW,
  NibKW,
  ByteKW,
  WordKW,

  LowByteKW,
  HighByteKW,

  DataKW,

  VarKW,
  PinKW,
  ConKW,

  CrKW,
  DecKW,
  HexKW,
  BinKW,

  DoneKW,
  ReturnKW,
  EndKW,
  ExitKW,
  StopKW,

  DoKW,
  LoopKW,
  WhileKW,
  UntilKW,

  ForKW,
  ToKW,
  StepKW,
  NextKW,

  IfKW,
  ThenKW,
  ElseKW,
  ElseifKW,
  EndifKW,

  AndKW,
  OrKW,
  XorKW,
  NotKW,

  GotoKW,
  GosubKW,

  PauseKW,
  NapKW,
  SleepKW,

  ButtonKW,
  RCTimeKW,

  CompareKW,

  HighKW,
  LowKW,
  ToggleKW,

  InputKW,
  OutputKW,
  ReverseKW,

  ConfigpinKW,
  CountKW,

  FreqoutKW,

  PulsoutKW,
  PulsinKW,

  ReadKW,
  WriteKW,
  LookupKW,
  LookdownKW,

  GetKW,
  PutKW,

  RunKW,
  StoreKW,

  SelectKW,
  EndselectKW,
  CaseKW,

  BranchKW,
  OnKW,

  AuxioKW,
  MainioKW,

  XOutKW,
  DTMFOutKW
}