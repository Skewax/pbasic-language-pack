@top Program { stmt* stmt_nosep? }

// NOTE TO SELF: HANDLE FILE 
// C:\Users\rafaed\Downloads\Archive.zip\Robotics 0\simplified navigation

@skip { space | Comment }

stmt { stmt_nosep? stmt_sep | Preprocessor }
stmt_sep { newline | ":" }
stmt_nosep { 

  Debugin |
  Debug |

  Serin |
  Serout |

  I2CIn |
  I2COut |

  Owin |
  Owout |

  Lcdin |
  Lcdout |
  Lcdcmd |

  For | 
  any_loop | 
  If |
  Select |

  VarDecl | 
  PinDecl | 
  ConDecl |
  DataDecl |

  Branch |
  OnGosub |
  OnGoto |

  Return | 
  Goto | 
  Gosub | 

  End |
  Exit |
  Stop |

  Pause |
  Nap |
  Sleep |

  Button |
  RCTime |

  Pollin | 
  Pollout |
  Pollrun |
  Pollwait |
  Pollmode |

  Compare |

  High |
  Low |
  Toggle |

  PWM |
  Random |

  Input |
  Output |
  Reverse |

  Configpin |
  Count |

  Auxio |
  Mainio |
  Ioterm |

  Freqout |
  Pulsout |
  Pulsin |

  Read |
  Write |
  Lookup |
  Lookdown |

  Get | 
  Put |

  Store |
  Run |

  XOut |
  DTMFOut |

  Assignment |

  ShiftIn |
  ShiftOut |

  Label
}

// declarations
ConDecl { Defident ConKW term }
PinDecl { Defident PinKW term }
VarDecl { Defident VarKW type }

DataDecl { Defident? DataKW DataLit }
DataLit { comma_sep<DataAlloc | (WordKW? expr ~data_alloc) | DataLoc> | String }
DataLoc { "@" DecimalInt }

// TODO: this conflicts very oddly with ArrayIndex! How should this be approached?
DataAlloc { WordKW? lit ~data_alloc "(" DecimalInt ")" }

// control flow

// for loops
For { 
  ForHeader
    stmt+ 
  NextKW 
}
ForHeader { ForKW Identifier "=" expr ToKW expr (StepKW expr)? }

// loops with "do"
any_loop { LoopUntil | UntilLoop | LoopWhile | WhileLoop | Loop }

Loop { DoKW stmt+ LoopKW }
UntilLoop { DoUntil stmt+ LoopKW }
WhileLoop { DoWhile stmt+ LoopKW }
LoopUntil { Loop Until }
LoopWhile { Loop While }

DoUntil { DoKW Until }
DoWhile { DoKW While }

Until { UntilKW Logical }
While { WhileKW Logical }

// if statements
IfTail { Elseif | Else | EndifKW }

If { IfKW Logical ThenKW stmt* IfTail }
Elseif { ElseifKW Logical ThenKW stmt* IfTail }
Else { ElseKW stmt* EndifKW }

// select statements
Select { SelectKW expr Case+ CaseElse? EndselectKW }
Case { CaseLabel stmt* }
CaseElse { CaseElseLabel stmt* }

CaseLabel { CaseKW comma_sep<pattern> }
CaseElseLabel { CaseKW ElseKW }

// branchers
Branch { BranchKW expr "," "[" comma_sep<Identifier> "]" }
OnGosub { OnKW expr GosubKW comma_sep<Identifier> }
OnGoto { OnKW expr GotoKW comma_sep<Identifier> }

// labels
Label { Defident ":" }

// general commands

// io commands
Debugin { DebuginKW InputFormatExpr }
Debug { DebugKW comma_sep<OutputFormatExpr> }

Serin { SerinKW ser_args<InputFormatExpr> }
Serout { SeroutKW ser_args<OutputFormatExpr> }

ser_args<fmt> {
  expr ("\\" expr)? ","      // rpin{\fpin}
  expr ","                   // baudmode
  (Identifier ~ plabel ",")?          // {plabel}
  (expr ~ plabel "," Identifier ",")? // {timeout, tlabel}
  "[" comma_sep<fmt> "]"     // format args
}

I2CIn { I2CInKW i2c_args<InputFormatExpr> }
I2COut { I2COutKW i2c_args<OutputFormatExpr> }

i2c_args<fmt> { 
  expr ","                  // pin 
  expr ","                  // slave id
  (expr ("\\" expr)? ",")?  // address / lowaddress
  "[" comma_sep<fmt> "]"    // formatting data
}

Owin { OwinKW simple_io_args<InputFormatExpr> }
Owout { OwoutKW simple_io_args<OutputFormatExpr> }

Lcdin { LcdinKW simple_io_args<InputFormatExpr> }
Lcdout { LcdoutKW simple_io_args<OutputFormatExpr> }
Lcdcmd { LcdcmdKW expr "," expr }

simple_io_args<fmt> { 
  expr ","               // pin 
  expr ","               // mode
  "[" comma_sep<fmt> "]" // formatting data
}

// pause time
Pause { PauseKW expr }
// nap time
Nap { NapKW expr }
// sleep time
Sleep { SleepKW expr }

Compare { CompareKW expr "," Identifier }

// input
Input { InputKW expr }
// output
Output { OutputKW expr }
// reverse
Reverse { ReverseKW expr }

Configpin { ConfigPinKW expr "," expr }
Count { CountKW expr "," expr "," Identifier }

// button pin, downstate, delay, rate, workspace,
//      targetstate, address
Button {
  ButtonKW 
    expr ","        //pin
    expr ","        //downstate
    expr ","        //delay
    expr ","        //rate
    Identifier ","  //workspace
    expr ","        //targetstate
    Identifier      //address
}
// rctime pin, state, var
RCTime { RCTimeKW lit "," lit "," Identifier }

Pollin { PollinKW expr "," expr }
Pollout { PolloutKW expr "," expr }
Pollrun { PollrunKW expr }
Pollwait { PollwaitKW expr }
Pollmode { PollmodeKW expr }

// high pin
High { HighKW expr }
// low pin
Low { LowKW expr }
// low pin
Toggle { ToggleKW expr }

PWM { PwmKW expr "," expr "," expr }
Random { RandomKW Identifier }

// read data_ref, [type] variable
Read { ReadKW expr "," comma_sep<WordKW? Identifier> }
Write { WriteKW expr "," comma_sep<WordKW? expr> }

Lookup { 
  LookupKW expr "," LookupTarget "," Identifier
}
Lookdown { 
  LookdownKW expr comp_op? "," LookupTarget "," Identifier
}

LookupTarget {
  "[" String "]" |
  "[" comma_sep<lit> "]"
}

Get { GetKW expr "," comma_sep<WordKW? Identifier> }
Put { PutKW expr "," comma_sep<WordKW? Identifier> }

Run { RunKW expr }
Store { StoreKW expr }

Freqout { FreqoutKW expr "," expr "," expr }
Pulsout { PulsoutKW expr "," expr }
Pulsin { PulsinKW expr "," expr "," Identifier }

Auxio { AuxioKW }
Mainio { MainioKW }
Ioterm { IotermKW expr }

Return { ReturnKW }
Goto { GotoKW Identifier }
Gosub { GosubKW Identifier }

End { EndKW }
Exit { ExitKW }
Stop { StopKW }

Assignment { (ArrayIndex<Identifier> | Identifier) "=" expr }

XOut {
  XOutKW expr "," expr "," "[" comma_sep<XOutParam> "]"
}

XOutParam {
  expr "\\" expr ("\\" expr)?
}

ShiftIn { 
  ShiftInKW expr "," //dpin 
    expr ","         //cpin 
    expr ","         //mode 
    "[" comma_sep<ShiftArg> "]" //shift args
}
ShiftOut { 
  ShiftOutKW expr "," //dpin 
    expr ","          //cpin 
    expr ","          //mode 
    "[" comma_sep<ShiftArg> "]" //shift args
}

ShiftArg { Identifier ("\\" expr)? }

DTMFOut { 
  DTMFOutKW expr ","        // pin
    (expr "," expr)?        // on-off time
    "[" comma_sep<expr> "]" // tones
}

// debug expressions are wacky

// see 'serin' documentation
InputFormatExpr
{
  (std_format_header | NumKW | SNumKW) Identifier |
  StrKW Identifier "\\" DecimalInt ("\\" DecimalInt)? |
  WaitStrKW Identifier ("\\" DecimalInt)? |
  SkipKW expr |
  SpstrKW expr 
}
OutputFormatExpr 
{
  std_format_header "?"? expr |
  AscKW "?" expr |
  StrKW "?"? expr ("\\" expr)? |
  RepKW expr "\\" expr |
  "?" ? expr |
  String
}
std_format_header {
  DecKW | SDecKW |
  HexKW | SHexKW | IHexKW | ISHexKW |
  BinKW | SBinKW | IBinKW | ISBinKW
}

// patterns
pattern { ValuePattern | ComparisonPattern | RangePattern }

ValuePattern { term }
ComparisonPattern { comp_op term }
RangePattern { term ToKW term }

// logical expressions are distinct
Logical { logical_term ((AndKW | XorKW | OrKW) logical_term)* }
logical_term {Not | Condition | Paren_Logical}
Paren_Logical { "(" Logical ")" }
Not { NotKW Condition }
Condition { term comp_op term }

comp_op { "=" | ">" | "<" | ">=" | "<=" | "<>" }

// simple expressions
expr { Arith | term | CrKW }

Arith { term (math_op term)+ }
math_op { Plus | Minus | Mult | Divide | Mult100 | Divide100 | Shl | Shr }

// terms and literals
term { ArrayIndex<term> | lit | paren }

ArrayIndex<base> { base "(" expr ")" }
lit { LowByte | HighByte | Identifier | Number | Char }

LowByte { Identifier "." LowByteKW }
HighByte { Identifier "." HighByteKW }

paren { "(" expr ")" }

// types 
type { ArrayType | base_type }
ArrayType { base_type "(" DecimalInt ")" }
base_type { BitKW | NibKW | ByteKW | WordKW }

// general utilities
comma_sep<item> { item ("," newline* item)* }
Number { DecimalInt | binary_int | hex_int }

Defident { Identifier }

@tokens {
  // Names
  Identifier { $[a-zA-Z_] $[a-zA-Z_0-9]* }

  // Numbers
  DecimalInt { $[0-9]+ }
  binary_int { "%" $[01]+ }
  hex_int { "$" $[0-9A-Fa-f]+ }

  // Text-based literals
  Char { '"' (!["\\] | "\\" _) '"' }
  String { '"' (!["\\] | "\\" _) (!["\\] | "\\" _)+ '"' }

  // Whitespace
  Comment { "'" ![\n]* }
  space { $[ \t]+ }
  newline { $[\n\r]+ }

  // Preprocessor
  Preprocessor { "#" ![\n]* }

  // Operators
  // arithmetics
  Plus { '+' }
  Minus { '-' }
  Mult { '*' }
  Divide { '/' }
  Mult100 { '**' }
  Divide100 { '/*' }
  Shl { '>>' }
  Shr { '<<' }

  // comparison
  "="
  ">"
  "<"
  ">="
  "<="
  "<>"

  // misc characters
  ","
  "("
  ")"
  "["
  "]"
  "?"
  ":"
  "."
  "\\"
  "@"
}

// Keywords
@external specialize {Identifier} keyword from "./specialization.ts" {

  // [[START KEYWORDS]] //

  DebugKW,
  DebuginKW,

  I2CInKW,
  I2COutKW,

  SerinKW,
  SeroutKW,

  OwinKW,
  OwoutKW,

  LcdinKW,
  LcdoutKW,
  LcdcmdKW,

  BitKW,
  NibKW,
  ByteKW,
  WordKW,

  LowByteKW,
  HighByteKW,

  DataKW,

  VarKW,
  PinKW,
  ConKW,

  CrKW,

  StrKW,
  RepKW,
  
  NumKW,
  SNumKW,
  WaitStrKW,
  SkipKW,
  SpstrKW,

  AscKW,

  DoneKW,
  ReturnKW,
  EndKW,
  ExitKW,
  StopKW,

  DoKW,
  LoopKW,
  WhileKW,
  UntilKW,

  ForKW,
  ToKW,
  StepKW,
  NextKW,

  IfKW,
  ThenKW,
  ElseKW,
  ElseifKW,
  EndifKW,

  AndKW,
  OrKW,
  XorKW,
  NotKW,

  GotoKW,
  GosubKW,

  PauseKW,
  NapKW,
  SleepKW,

  ButtonKW,
  RCTimeKW,

  PollinKW,
  PolloutKW,
  PollrunKW,
  PollwaitKW,
  PollmodeKW,

  CompareKW,

  HighKW,
  LowKW,
  ToggleKW,

  PwmKW,
  RandomKW,

  InputKW,
  OutputKW,
  ReverseKW,

  ConfigPinKW,
  CountKW,

  FreqoutKW,

  PulsoutKW,
  PulsinKW,

  ReadKW,
  WriteKW,
  LookupKW,
  LookdownKW,

  GetKW,
  PutKW,

  RunKW,
  StoreKW,

  SelectKW,
  EndselectKW,
  CaseKW,

  BranchKW,
  OnKW,

  AuxioKW,
  MainioKW,
  IotermKW,

  XOutKW,
  DTMFOutKW,

  ShiftInKW,
  ShiftOutKW
  
  // [[END KEYWORDS]] //

}


@external specialize {Identifier} format_keyword from "./specialization.ts" {

  // [[START FORMAT KEYWORDS]] //

  DecKW,
  SDecKW,

  HexKW,
  SHexKW,
  IHexKW,
  ISHexKW

  BinKW,
  SBinKW,
  IBinKW,
  ISBinKW

  // [[END FORMAT KEYWORDS]] //

}